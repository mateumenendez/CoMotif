} else { count[1 , colnames(count) == "motif_2"] <- 0 }
# Motif 3
res <- c()
results <- motif3(pos = pos.s, neg = neg.s, all = all.s, uniq = uniq.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/3)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_3"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_3"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_3"] <- 0 }
# Motif 4
res <- c()
results <- motif4(pos = pos.s, neg = neg.s, all = all.s, uniq = uniq.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/3)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_4"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_4"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_4"] <- 0 }
# Motif 5
res <- c()
results <- motif5(pos = pos.s, uniq.pos = uniq.pos.s, all = all.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/3)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_5"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_5"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_5"] <- 0 }
# Motif 6
res <- c()
results <- motif6(neg = neg.s, uniq.neg = uniq.neg.s, all = all.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/3)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_6"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_6"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_6"] <- 0 }
# Motif 7
res <- c()
results <- motif7(pos = pos.s, neg = neg.s, all = all.s, uniq = uniq.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/3)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_7"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_7"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_7"] <- 0 }
if( square.motifs == TRUE ){
# Motif 8
res <- c()
results <- motif8(pos = pos.s, uniq.pos = uniq.pos.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/4)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_8"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_8"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_8"] <- 0 }
# Motif 9
res <- c()
results <- motif9(pos = pos.s, neg = neg.s, uniq.neg = uniq.neg.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/4)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_9"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_9"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_9"] <- 0 }
# Motif 10
res <- c()
results <- motif10(pos = pos.s, neg = neg.s, uniq.neg = uniq.neg.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/4)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_10"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_10"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_10"] <- 0 }
# Motif 11
res <- c()
results <- motif11(pos = pos.s, neg = neg.s, uniq.pos = uniq.pos.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/4)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_11"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_11"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_11"] <- 0 }
# Motif 12
res <- c()
results <- motif12(neg = neg.s, uniq.neg = uniq.neg.s, res = res)
if(is.vector(results)){
a <- as.data.frame(split(results, ceiling(seq_along(results)/4)))
a.m <- t(a)
a.df <- as.data.frame(t(a))
rep <- duplicated(
lapply(1:nrow(a.m), function(y){
A <- a.m[y, ]
A[order(A)]
}))
a.df.f <- a.df[!rep,]
if( out == "count" ) {
count[1 , colnames(count) == "motif_12"] <- nrow(a.df.f)
} else {NULL}
if( out == "normalized" ) {
count[1 , colnames(count) == "motif_12"] <- nrow(a.df.f)/(length(uniq)^2)
} else {NULL}
} else { count[1 , colnames(count) == "motif_12"] <- 0 }
}
## UNA VEZ TODO HA TERMINADO ....
count #Equivalent to finalMatrix = cbind(finalMatrix, tempMatrix)
}
#stop cluster
parallel::stopCluster(cl)
return(finalMatrix)
}
`%!in%` = Negate(`%in%`)
nodes <- c("aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba", "bb", "bc", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bk", "bl", "bm", "bn", "bo", "bp", "bq", "br", "bs", "bt", "bu", "bv", "bw", "bx", "by", "bz", "ca", "cb", "cc", "cd", "ce", "cf", "cg", "ch", "ci", "cj", "ck", "cl", "cm", "cn", "co", "cp", "cq", "cr", "cs", "ct", "cu", "cv", "cw", "cx", "cy", "cz", "da", "db", "dc", "dd", "de", "df", "dg", "dh", "di", "dj", "dk", "dl", "dm", "dn", "do", "dp", "dq", "dr", "ds", "dt", "du", "dv", "dw", "dx", "dy", "dz", "ea", "eb", "ec", "ed", "ee", "ef", "eg", "eh", "ei", "ej", "ek", "el", "em", "en", "eo", "ep", "eq", "er", "es", "et", "eu", "ev", "ew", "ex", "ey", "ez", "fa", "fb", "fc", "fd", "fe", "ff", "fg", "fh", "fi", "fj", "fk", "fl", "fm", "fn", "fo", "fp", "fq", "fr", "fs", "ft", "fu", "fv", "fw", "fx", "fy", "fz", "ga", "gb", "gc", "gd", "ge", "gf", "gg", "gh", "gi", "gj", "gk", "gl", "gm", "gn", "go", "gp", "gq", "gr", "gs", "gt", "gu", "gv", "gw", "gx", "gy", "gz")
pos.length <- 500
neg.length <- 500
pos <- data.frame(Source = rep(NA, pos.length), Target = rep(NA, pos.length), Type = rep("POS", pos.length))
i <- 1
while(i <= pos.length){
pair <- sample(x = nodes, size = 2, replace = F)
tmp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
if(pair[2] %!in% c(as.character(tmp1$Source), as.character(tmp1$Target))){
pos[i,1] <- pair[1]
pos[i,2] <- pair[2]
i <- i + 1
rm(pair, tmp1)
} else {NULL}
}
neg <- data.frame(Source = rep(NA, neg.length), Target = rep(NA, neg.length), Type = rep("NEG", neg.length))
i <- 1
while(i <= neg.length){
pair <- sample(x = nodes, size = 2, replace = F)
temp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
temp2 <- neg[neg$Source == pair[1] | neg$Target == pair[1],]
if(pair[2] %!in% c(as.character(temp1$Source), as.character(temp1$Target))){
if(pair[2] %!in% c(as.character(temp2$Source), as.character(temp2$Target))){
neg[i,1] <- pair[1]
neg[i,2] <- pair[2]
i <- i + 1
} else {NULL}
} else {NULL}
}
rm(temp1, temp2, i)
for(h in 1:nrow(pos)){
for(g in 1:nrow(neg)){
if(sum(pos[h,1] == neg[g,1], pos[h,1] == neg[g,2], pos[h,2] == neg[g,1], pos[h,2] == neg[g,2]) >= 2){
print(paste(h,g, sep = " - "))
} else {NULL}
}
}
devtools::load_all()
##
test <- motifs(pos = pos, neg = neg, network_name = "test", out = "count", square.motifs = T)
random <- conf.motifs.p(pos = pos, neg = neg, network_name = "random", out = "count", square.motifs = T, num_random_networks = 50, cores = 4)
motifs <- test$count
null <- random
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
results <- data.frame(apply(results, 2, function(x) {x/(sqrt(sum(apply(results, 2, function(x) {x^2}))))}))
results$motif <- rownames(results)
results$network <- "test"
colnames(results)[1] <- "score"
results$motif <- factor(results$motif, levels(as.factor(results$motif))[c(1,5:12,2:4)])
results$motif.n <- results$motif
results$motif <- gsub("motif_", "", results$motif)
results$motif <- as.numeric(results$motif)
library(ggplot2)
ggplot(results, aes(motif, score))+
geom_line()+
geom_point(size = 2)+
geom_hline(yintercept = 0, color = "black", linetype="dashed")+
scale_x_continuous(breaks = 1:12)
`%!in%` = Negate(`%in%`)
nodes <- c("aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba", "bb", "bc", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bk", "bl", "bm", "bn", "bo", "bp", "bq", "br", "bs", "bt", "bu", "bv", "bw", "bx", "by", "bz", "ca", "cb", "cc", "cd", "ce", "cf", "cg", "ch", "ci", "cj", "ck", "cl", "cm", "cn", "co", "cp", "cq", "cr", "cs", "ct", "cu", "cv", "cw", "cx", "cy", "cz", "da", "db", "dc", "dd", "de", "df", "dg", "dh", "di", "dj", "dk", "dl", "dm", "dn", "do", "dp", "dq", "dr", "ds", "dt", "du", "dv", "dw", "dx", "dy", "dz", "ea", "eb", "ec", "ed", "ee", "ef", "eg", "eh", "ei", "ej", "ek", "el", "em", "en", "eo", "ep", "eq", "er", "es", "et", "eu", "ev", "ew", "ex", "ey", "ez", "fa", "fb", "fc", "fd", "fe", "ff", "fg", "fh", "fi", "fj", "fk", "fl", "fm", "fn", "fo", "fp", "fq", "fr", "fs", "ft", "fu", "fv", "fw", "fx", "fy", "fz", "ga", "gb", "gc", "gd", "ge", "gf", "gg", "gh", "gi", "gj", "gk", "gl", "gm", "gn", "go", "gp", "gq", "gr", "gs", "gt", "gu", "gv", "gw", "gx", "gy", "gz")
pos.length <- 500
neg.length <- 500
pos <- data.frame(Source = rep(NA, pos.length), Target = rep(NA, pos.length), Type = rep("POS", pos.length))
i <- 1
while(i <= pos.length){
pair <- sample(x = nodes, size = 2, replace = F)
tmp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
if(pair[2] %!in% c(as.character(tmp1$Source), as.character(tmp1$Target))){
pos[i,1] <- pair[1]
pos[i,2] <- pair[2]
i <- i + 1
rm(pair, tmp1)
} else {NULL}
}
neg <- data.frame(Source = rep(NA, neg.length), Target = rep(NA, neg.length), Type = rep("NEG", neg.length))
i <- 1
while(i <= neg.length){
pair <- sample(x = nodes, size = 2, replace = F)
temp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
temp2 <- neg[neg$Source == pair[1] | neg$Target == pair[1],]
if(pair[2] %!in% c(as.character(temp1$Source), as.character(temp1$Target))){
if(pair[2] %!in% c(as.character(temp2$Source), as.character(temp2$Target))){
neg[i,1] <- pair[1]
neg[i,2] <- pair[2]
i <- i + 1
} else {NULL}
} else {NULL}
}
rm(temp1, temp2, i)
for(h in 1:nrow(pos)){
for(g in 1:nrow(neg)){
if(sum(pos[h,1] == neg[g,1], pos[h,1] == neg[g,2], pos[h,2] == neg[g,1], pos[h,2] == neg[g,2]) >= 2){
print(paste(h,g, sep = " - "))
} else {NULL}
}
}
### @ ###
test <- motifs(pos = pos, neg = neg, network_name = "test", out = "count", square.motifs = T)
random <- conf.motifs.p(pos = pos, neg = neg, network_name = "random", out = "count", square.motifs = T, num_random_networks = 50, cores = 4)
motifs <- test$count
null <- random
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
results <- data.frame(apply(results, 2, function(x) {x/(sqrt(sum(apply(results, 2, function(x) {x^2}))))}))
results$motif <- rownames(results)
results$network <- "test"
colnames(results)[1] <- "score"
results$motif <- factor(results$motif, levels(as.factor(results$motif))[c(1,5:12,2:4)])
results$motif.n <- results$motif
results$motif <- gsub("motif_", "", results$motif)
results$motif <- as.numeric(results$motif)
library(ggplot2)
ggplot(results, aes(motif, score))+
geom_line()+
geom_point(size = 2)+
geom_hline(yintercept = 0, color = "black", linetype="dashed")+
scale_x_continuous(breaks = 1:12)
`%!in%` = Negate(`%in%`)
nodes <- c("aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba", "bb", "bc", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bk", "bl", "bm", "bn", "bo", "bp", "bq", "br", "bs", "bt", "bu", "bv", "bw", "bx", "by", "bz", "ca", "cb", "cc", "cd", "ce", "cf", "cg", "ch", "ci", "cj", "ck", "cl", "cm", "cn", "co", "cp", "cq", "cr", "cs", "ct", "cu", "cv", "cw", "cx", "cy", "cz", "da", "db", "dc", "dd", "de", "df", "dg", "dh", "di", "dj", "dk", "dl", "dm", "dn", "do", "dp", "dq", "dr", "ds", "dt", "du", "dv", "dw", "dx", "dy", "dz", "ea", "eb", "ec", "ed", "ee", "ef", "eg", "eh", "ei", "ej", "ek", "el", "em", "en", "eo", "ep", "eq", "er", "es", "et", "eu", "ev", "ew", "ex", "ey", "ez", "fa", "fb", "fc", "fd", "fe", "ff", "fg", "fh", "fi", "fj", "fk", "fl", "fm", "fn", "fo", "fp", "fq", "fr", "fs", "ft", "fu", "fv", "fw", "fx", "fy", "fz", "ga", "gb", "gc", "gd", "ge", "gf", "gg", "gh", "gi", "gj", "gk", "gl", "gm", "gn", "go", "gp", "gq", "gr", "gs", "gt", "gu", "gv", "gw", "gx", "gy", "gz")
pos.length <- 500
neg.length <- 500
pos <- data.frame(Source = rep(NA, pos.length), Target = rep(NA, pos.length), Type = rep("POS", pos.length))
i <- 1
while(i <= pos.length){
pair <- sample(x = nodes, size = 2, replace = F)
tmp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
if(pair[2] %!in% c(as.character(tmp1$Source), as.character(tmp1$Target))){
pos[i,1] <- pair[1]
pos[i,2] <- pair[2]
i <- i + 1
rm(pair, tmp1)
} else {NULL}
}
neg <- data.frame(Source = rep(NA, neg.length), Target = rep(NA, neg.length), Type = rep("NEG", neg.length))
i <- 1
while(i <= neg.length){
pair <- sample(x = nodes, size = 2, replace = F)
temp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
temp2 <- neg[neg$Source == pair[1] | neg$Target == pair[1],]
if(pair[2] %!in% c(as.character(temp1$Source), as.character(temp1$Target))){
if(pair[2] %!in% c(as.character(temp2$Source), as.character(temp2$Target))){
neg[i,1] <- pair[1]
neg[i,2] <- pair[2]
i <- i + 1
} else {NULL}
} else {NULL}
}
rm(temp1, temp2, i)
for(h in 1:nrow(pos)){
for(g in 1:nrow(neg)){
if(sum(pos[h,1] == neg[g,1], pos[h,1] == neg[g,2], pos[h,2] == neg[g,1], pos[h,2] == neg[g,2]) >= 2){
print(paste(h,g, sep = " - "))
} else {NULL}
}
}
### @ ###
test <- motifs(pos = pos, neg = neg, network_name = "test", out = "count", square.motifs = T)
random <- conf.motifs.p(pos = pos, neg = neg, network_name = "random", out = "count", square.motifs = T, num_random_networks = 50, cores = 4)
motifs <- test$count
null <- random
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
results <- data.frame(apply(results, 2, function(x) {x/(sqrt(sum(apply(results, 2, function(x) {x^2}))))}))
results$motif <- rownames(results)
results$network <- "test"
colnames(results)[1] <- "score"
results$motif <- factor(results$motif, levels(as.factor(results$motif))[c(1,5:12,2:4)])
results$motif.n <- results$motif
results$motif <- gsub("motif_", "", results$motif)
results$motif <- as.numeric(results$motif)
library(ggplot2)
ggplot(results, aes(motif, score))+
geom_line()+
geom_point(size = 2)+
geom_hline(yintercept = 0, color = "black", linetype="dashed")+
scale_x_continuous(breaks = 1:12)
# check
for(h in 1:nrow(pos)){
for(g in 1:nrow(neg)){
if(sum(pos[h,1] == neg[g,1], pos[h,1] == neg[g,2], pos[h,2] == neg[g,1], pos[h,2] == neg[g,2]) >= 2){
print(paste(h,g, sep = " - "))
} else {NULL}
}
}
motifs <- random[1,]
motifs <- random[1,]
null <- random[-1,]
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
results <- data.frame(apply(results, 2, function(x) {x/(sqrt(sum(apply(results, 2, function(x) {x^2}))))}))
results$motif <- rownames(results)
results$network <- "test"
colnames(results)[1] <- "score"
results$motif <- factor(results$motif, levels(as.factor(results$motif))[c(1,5:12,2:4)])
results$motif.n <- results$motif
results$motif <- gsub("motif_", "", results$motif)
results$motif <- as.numeric(results$motif)
library(ggplot2)
ggplot(results, aes(motif, score))+
geom_line()+
geom_point(size = 2)+
geom_hline(yintercept = 0, color = "black", linetype="dashed")+
scale_x_continuous(breaks = 1:12)
motifs <- random[6,]
null <- random[-6,]
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
results <- data.frame(apply(results, 2, function(x) {x/(sqrt(sum(apply(results, 2, function(x) {x^2}))))}))
results$motif <- rownames(results)
results$network <- "test"
colnames(results)[1] <- "score"
results$motif <- factor(results$motif, levels(as.factor(results$motif))[c(1,5:12,2:4)])
results$motif.n <- results$motif
results$motif <- gsub("motif_", "", results$motif)
results$motif <- as.numeric(results$motif)
library(ggplot2)
ggplot(results, aes(motif, score))+
geom_line()+
geom_point(size = 2)+
geom_hline(yintercept = 0, color = "black", linetype="dashed")+
scale_x_continuous(breaks = 1:12)
motifs <- random[20,]
null <- random[-20,]
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
results <- data.frame(apply(results, 2, function(x) {x/(sqrt(sum(apply(results, 2, function(x) {x^2}))))}))
results$motif <- rownames(results)
results$network <- "test"
colnames(results)[1] <- "score"
results$motif <- factor(results$motif, levels(as.factor(results$motif))[c(1,5:12,2:4)])
results$motif.n <- results$motif
results$motif <- gsub("motif_", "", results$motif)
results$motif <- as.numeric(results$motif)
library(ggplot2)
ggplot(results, aes(motif, score))+
geom_line()+
geom_point(size = 2)+
geom_hline(yintercept = 0, color = "black", linetype="dashed")+
scale_x_continuous(breaks = 1:12)
devtools::test()
devtools::load_all()
devtools::build()
`%!in%` = Negate(`%in%`)
nodes <- c("aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba", "bb", "bc", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bk", "bl", "bm", "bn", "bo", "bp", "bq", "br", "bs", "bt", "bu", "bv", "bw", "bx", "by", "bz", "ca", "cb", "cc", "cd", "ce", "cf", "cg", "ch", "ci", "cj", "ck", "cl", "cm", "cn", "co", "cp", "cq", "cr", "cs", "ct", "cu", "cv", "cw", "cx", "cy", "cz", "da", "db", "dc", "dd", "de", "df", "dg", "dh", "di", "dj", "dk", "dl", "dm", "dn", "do", "dp", "dq", "dr", "ds", "dt", "du", "dv", "dw", "dx", "dy", "dz", "ea", "eb", "ec", "ed", "ee", "ef", "eg", "eh", "ei", "ej", "ek", "el", "em", "en", "eo", "ep", "eq", "er", "es", "et", "eu", "ev", "ew", "ex", "ey", "ez", "fa", "fb", "fc", "fd", "fe", "ff", "fg", "fh", "fi", "fj", "fk", "fl", "fm", "fn", "fo", "fp", "fq", "fr", "fs", "ft", "fu", "fv", "fw", "fx", "fy", "fz", "ga", "gb", "gc", "gd", "ge", "gf", "gg", "gh", "gi", "gj", "gk", "gl", "gm", "gn", "go", "gp", "gq", "gr", "gs", "gt", "gu", "gv", "gw", "gx", "gy", "gz")
pos.length <- 100
neg.length <- 100
pos <- data.frame(Source = rep(NA, pos.length), Target = rep(NA, pos.length), Type = rep("POS", pos.length))
i <- 1
while(i <= pos.length){
pair <- sample(x = nodes, size = 2, replace = F)
tmp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
if(pair[2] %!in% c(as.character(tmp1$Source), as.character(tmp1$Target))){
pos[i,1] <- pair[1]
pos[i,2] <- pair[2]
i <- i + 1
rm(pair, tmp1)
} else {NULL}
}
neg <- data.frame(Source = rep(NA, neg.length), Target = rep(NA, neg.length), Type = rep("NEG", neg.length))
i <- 1
while(i <= neg.length){
pair <- sample(x = nodes, size = 2, replace = F)
temp1 <- pos[pos$Source == pair[1] | pos$Target == pair[1],]
temp2 <- neg[neg$Source == pair[1] | neg$Target == pair[1],]
if(pair[2] %!in% c(as.character(temp1$Source), as.character(temp1$Target))){
if(pair[2] %!in% c(as.character(temp2$Source), as.character(temp2$Target))){
neg[i,1] <- pair[1]
neg[i,2] <- pair[2]
i <- i + 1
} else {NULL}
} else {NULL}
}
rm(temp1, temp2, i)
# check
for(h in 1:nrow(pos)){
for(g in 1:nrow(neg)){
if(sum(pos[h,1] == neg[g,1], pos[h,1] == neg[g,2], pos[h,2] == neg[g,1], pos[h,2] == neg[g,2]) >= 2){
print(paste(h,g, sep = " - "))
} else {NULL}
}
}
### @ ###
test <- motifs(pos = pos, neg = neg, network_name = "test", out = "count", square.motifs = T)
random <- conf.motifs.p(pos = pos, neg = neg, network_name = "random", out = "count", square.motifs = T, num_random_networks = 50, cores = 4)
devtools::load_all()
### @ ###
test <- motifs(pos = pos, neg = neg, network_name = "test", out = "count", square.motifs = T)
random <- conf.motifs.p(pos = pos, neg = neg, network_name = "random", out = "count", square.motifs = T, num_random_networks = 50, cores = 4)
motifs <- test$count
null <- random
sd <- apply(null[,2:13], 2, FUN = sd)
mean <- apply(null[,2:13], 2, FUN = mean)
results <- data.frame((motifs[,2:13] - mean)/sd)
View(results)
